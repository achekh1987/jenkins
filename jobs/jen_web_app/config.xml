<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.40">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.8.4"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.8.4">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>pipeline web_app</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.33.1">
      <projectUrl>https://github.com/ggfffffffffff/HEH_UI.git/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>10</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.33.1">
          <spec></spec>
        </com.cloudbees.jenkins.GitHubPushTrigger>
        <hudson.triggers.SCMTrigger>
          <spec>*/1 * * * *</spec>
          <ignorePostCommitHooks>false</ignorePostCommitHooks>
        </hudson.triggers.SCMTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.90">
    <script>pipeline{
    agent {label &apos;docker&apos;}
    tools {
        maven &apos;maven3&apos;
    }
    environment {
        DOCKER_TAG = &quot;${BUILD_NUMBER}&quot;
        versionProject = &apos;3.1.&apos;
        loginSSHvm = &apos;ubuntu&apos;
        ipTestVM = &apos;10.0.1.13&apos;
        ipweb1VM = &apos;10.0.1.11&apos;
        ipweb2VM = &apos;10.0.1.12&apos;
        loginDockerHub = &apos;mikhailyesman&apos;
        nameDockerImage = &apos;webapp&apos;
        workDirInnerFolder = &apos;HEH_UI/&apos;
        workDirProject = &apos;heh-ui/&apos;
        workDir = &apos;/home/ubuntu/&apos;
        rm_dir1 = &apos;${workDir}workspace/sonarqube/${workDirInnerFolder}&apos;
        rm_dir2 = &apos;${workDir}workspace/sonarqube/html&apos;
        githubUI = &apos;https://github.com/ggfffffffffff/HEH_UI.git&apos;
        showIPsite = &apos;http://2ip.ru&apos;
    }
    stages{
        stage(&apos;SCM&apos;){
            steps{
                echo &quot;Start of Stage Download&quot;
                echo &quot;Download......&quot;
                git credentialsId: &apos;heh&apos;, url: &apos;https://github.com/ggfffffffffff/HEH_UI.git&apos;
                script {
                    try {
                        sh &apos;&apos;&apos;cd ${workDir}
                        sudo rm -Rfv ${workDirInnerFolder}
                        &apos;&apos;&apos;
                    }
                    catch (Throwable e) {
                        currentBuild.result = &quot;SUCCESS&quot;
                    }
                }
                sh &apos;&apos;&apos;
                pwd
                ls -la
                curl ${showIPsite}
                cd ${workDir}
                sudo git clone ${githubUI}
                &apos;&apos;&apos;
                echo &quot;End of Stage Download&quot;
            }
        }

        stage(&apos;Build Docker Image&apos;){
            steps{
                sh &apos;&apos;&apos;
                cd ${workDir}${workDirInnerFolder}${workDirProject}
                ls
                pwd
                ls -la
                curl ${showIPsite}
                sudo docker build . -t ${loginDockerHub}/${nameDockerImage}:${versionProject}${DOCKER_TAG}
                sudo docker image ls
                &apos;&apos;&apos;
                script {
                    try {
                        sh &apos;&apos;&apos;cd ${workDir}
                        sudo rm -Rfv ${workDirInnerFolder}
                        &apos;&apos;&apos;
                    }
                    catch (Throwable e) {
                        currentBuild.result = &quot;SUCCESS&quot;
                    }
                }
            }
        }

        stage(&apos;Push Docker Image&apos;){
            steps{
                withCredentials([string(credentialsId: &apos;docker-hub&apos;, variable: &apos;dockerHubPwd&apos;)]) {
                    sh &apos;sudo  docker login -u ${loginDockerHub} -p ${dockerHubPwd}&apos;
                }
                sh &apos;sudo docker push ${loginDockerHub}/${nameDockerImage}:${versionProject}${DOCKER_TAG}&apos;
                sh &apos;sudo docker rmi -f  ${loginDockerHub}/${nameDockerImage}:${versionProject}${DOCKER_TAG}&apos;
            }
        }

        stage(&apos;Run Container on Test Server&apos;){
            steps{
                sshagent([&apos;kluu&apos;]) {
                    script {
                        try {
                            sh &apos;ssh -o StrictHostKeyChecking=no ${loginSSHvm}@${ipTestVM} sudo docker stop my-app&apos;
                            sh &apos;ssh -o StrictHostKeyChecking=no ${loginSSHvm}@${ipTestVM}  sudo docker rm my-app&apos;
                        }
                        catch (Throwable e) {
                            currentBuild.result = &quot;SUCCESS&quot;
                        }
                    }
                    sh &apos;ssh -o StrictHostKeyChecking=no ${loginSSHvm}@${ipTestVM}  sudo docker run -p 80:80 -d --name my-app ${loginDockerHub}/${nameDockerImage}:${versionProject}${DOCKER_TAG}&apos;
                }
                echo &quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!TEST TIME!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;
                script {
                    try {
                        sh &apos;curl ${ipTestVM}:80 --connect-timeout 3&apos;
                        sh &apos;curl ${ipTestVM} | grep &quot;heh&quot;&apos;
                        sleep(time: 1, unit: &quot;SECONDS&quot;)
                    }
                    catch (Throwable e) {
                    echo &quot;!!!!!!!!!!!!!!!!!!!!!ERROR!!!!!!!!!!!!!!!!!!!!!&quot;
                    echo &quot;Build not working. Web Test failed&quot;

                    currentBuild.result = &quot;FAILURE&quot; //SUCCESS&quot;
                    exit 0
                    }
                echo &quot;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!GOOD BOY!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;
                }
            }
        }

        stage(&apos;Run Container on Dev Server&apos;){
            steps{
                script {
                    try {
                        sh &apos;sudo rm -rf ${rm_dir1}&apos;
                        sh &apos;sudo rm -rf ${rm_dir2}&apos;
                        sh &apos;curl ${showIPsite}&apos;
                    }
                    catch (Throwable e) {
                        currentBuild.result = &quot;SUCCESS&quot;
                    }
                }
                sshagent([&apos;kluu&apos;]) {
                    script {
                        try {
                            sh &apos;ssh -o StrictHostKeyChecking=no ${loginSSHvm}@${ipweb1VM} sudo docker stop my-app&apos;
                            sh &apos;ssh -o StrictHostKeyChecking=no ${loginSSHvm}@${ipweb1VM}  sudo docker rm my-app&apos;
                        }
                        catch (Throwable e) {
                            currentBuild.result = &quot;SUCCESS&quot;
                        }
                    sh &apos;ssh -o StrictHostKeyChecking=no ${loginSSHvm}@${ipweb1VM}  sudo docker run -p 80:80 -d --name my-app ${loginDockerHub}/${nameDockerImage}:${versionProject}${DOCKER_TAG}&apos;
                    sh &apos;curl ${showIPsite}&apos;
                    }
                }
                script {
                    try {
                        sh &apos;curl ${ipweb1VM}:80 --connect-timeout 3&apos;
                        sleep(time: 1, unit: &quot;SECONDS&quot;)
                    }
                    catch (Throwable e) {
                        echo &quot;!!!!!!!!!!!!!!!!!!!!!ERROR!!!!!!!!!!!!!!!!!!!!!&quot;
                        echo &quot;Build not working. Web server1 failed&quot;

                        currentBuild.result = &quot;FAILURE&quot; //SUCCESS&quot;
                        exit 0
                    }
                }
                sshagent([&apos;kluu&apos;]) {
                    script {
                        try {
                            sh &apos;ssh -o StrictHostKeyChecking=no ${loginSSHvm}@${ipweb2VM} sudo docker stop my-app&apos;
                            sh &apos;ssh -o StrictHostKeyChecking=no ${loginSSHvm}@${ipweb2VM}  sudo docker rm my-app&apos;
                        }
                        catch (Throwable e) {
                            currentBuild.result = &quot;SUCCESS&quot;
                        }
                    }
                    sh &apos;ssh -o StrictHostKeyChecking=no ${loginSSHvm}@${ipweb2VM}  sudo docker run -p 80:80 -d --name my-app ${loginDockerHub}/${nameDockerImage}:${versionProject}${DOCKER_TAG}&apos;
                    sh &apos;curl ${showIPsite}&apos;
                }
                script {
                    try {
                        sh &apos;curl ${ipweb2VM}:80 --connect-timeout 3&apos;
                        sleep(time: 1, unit: &quot;SECONDS&quot;)
                    }
                    catch (Throwable e) {
                        echo &quot;!!!!!!!!!!!!!!!!!!!!!ERROR!!!!!!!!!!!!!!!!!!!!!&quot;
                        echo &quot;Build not working. Web server2 failed&quot;

                        currentBuild.result = &quot;FAILURE&quot; //SUCCESS&quot;
                        exit 0
                    }
                }
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>