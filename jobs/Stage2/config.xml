<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.40">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.8.4"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.8.4">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Stage 2 for Run Container on Dev Server</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>3</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>DOCKER_IMAGE_NUMBER</name>
          <description>Enter the build number. The build number is made up of the version and the &quot;Stage1&quot; job number. Example: 2.1.34</description>
          <defaultValue>2.1.</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.90">
    <script>pipeline{
    agent {label &apos;docker&apos;}
    tools {
        maven &apos;maven3&apos;
    }
    environment {
        DOCKER_TAG = &quot;$DOCKER_IMAGE_NUMBER&quot;
        //versionProject = &apos;2.1.&apos;
        loginSSHvm = &apos;ubuntu&apos;
        ipTestVM = &apos;10.0.1.13&apos;
        ipweb1VM = &apos;10.0.1.11&apos;
        ipweb2VM = &apos;10.0.1.12&apos;
        loginDockerHub = &apos;mikhailyesman&apos;
        nameDockerImage = &apos;webapp&apos;
        workDirInnerFolder = &apos;HEH_UI/&apos;
        workDirProject = &apos;heh-ui/&apos;
        workDir = &apos;/home/ubuntu/&apos;
        rm_dir1 = &apos;${workDir}workspace/sonarqube/${workDirInnerFolder}&apos;
        rm_dir2 = &apos;${workDir}workspace/sonarqube/html&apos;
        githubUI = &apos;https://github.com/ggfffffffffff/HEH_UI.git&apos;
        showIPsite = &apos;http://2ip.ru&apos;
    }
    stages{
        stage(&apos;Run Container on Dev Server&apos;){
            steps{
                //def output = sh returnStdout: true, script: &apos;wget http://3.64.157.208/job/Stage1/lastBuild/buildNumber -q -O -&apos;
                
                
                 
                script {
                    try {
                        sh &apos;sudo rm -rf ${rm_dir1}&apos;
                        sh &apos;sudo rm -rf ${rm_dir2}&apos;
                        sh &apos;curl ${showIPsite}&apos;
                    }
                    catch (Throwable e) {
                        currentBuild.result = &quot;SUCCESS&quot;
                    }
                }
                sshagent([&apos;kluu&apos;]) {
                    script {
                        try {
                            sh &apos;ssh -o StrictHostKeyChecking=no ${loginSSHvm}@${ipweb1VM} sudo docker stop my-app&apos;
                            sh &apos;ssh -o StrictHostKeyChecking=no ${loginSSHvm}@${ipweb1VM}  sudo docker rm my-app&apos;
                        }
                        catch (Throwable e) {
                            currentBuild.result = &quot;SUCCESS&quot;
                        }
                    sh &apos;ssh -o StrictHostKeyChecking=no ${loginSSHvm}@${ipweb1VM}  sudo docker run -p 80:80 -d --name my-app ${loginDockerHub}/${nameDockerImage}:${DOCKER_TAG}&apos;
                    sh &apos;curl ${showIPsite}&apos;
                    }
                }
                script {
                    try {
                        sh &apos;curl ${ipweb1VM}:80 --connect-timeout 3&apos;
                        sleep(time: 2, unit: &quot;SECONDS&quot;)
                    }
                    catch (Throwable e) {
                        echo &quot;!!!!!!!!!!!!!!!!!!!!!ERROR!!!!!!!!!!!!!!!!!!!!!&quot;
                        echo &quot;Build not working. Web server1 failed&quot;

                        currentBuild.result = &quot;FAILURE&quot; //SUCCESS&quot;
                        exit 0
                    }
                }
                sshagent([&apos;kluu&apos;]) {
                    script {
                        try {
                            sh &apos;ssh -o StrictHostKeyChecking=no ${loginSSHvm}@${ipweb2VM} sudo docker stop my-app&apos;
                            sh &apos;ssh -o StrictHostKeyChecking=no ${loginSSHvm}@${ipweb2VM}  sudo docker rm my-app&apos;
                        }
                        catch (Throwable e) {
                            currentBuild.result = &quot;SUCCESS&quot;
                        }
                    }
                    sh &apos;ssh -o StrictHostKeyChecking=no ${loginSSHvm}@${ipweb2VM}  sudo docker run -p 80:80 -d --name my-app ${loginDockerHub}/${nameDockerImage}:${DOCKER_TAG}&apos;
                    sh &apos;curl ${showIPsite}&apos;
                }
                script {
                    try {
                        sh &apos;curl ${ipweb2VM}:80 --connect-timeout 3&apos;
                        sleep(time: 2, unit: &quot;SECONDS&quot;)
                    }
                    catch (Throwable e) {
                        echo &quot;!!!!!!!!!!!!!!!!!!!!!ERROR!!!!!!!!!!!!!!!!!!!!!&quot;
                        echo &quot;Build not working. Web server2 failed&quot;

                        currentBuild.result = &quot;FAILURE&quot; //SUCCESS&quot;
                        exit 0
                    }
                }
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <quietPeriod>30</quietPeriod>
  <disabled>false</disabled>
</flow-definition>